---
import { cn } from '@/lib/utils';

export interface Props {
    currentPage?: number;
    totalPages?: number;
    totalItems?: number;
    pageSize?: number;
    maxVisible?: number;
    maxElements?: number;
    showInfo?: boolean;
    showFirstLast?: boolean;
    class?: string;
    [key: string]: any;
}

const {
    currentPage = 1,
    totalPages = 1,
    totalItems = 0,
    pageSize = 10,
    maxVisible = 5,
    maxElements = 7,
    showInfo = true,
    showFirstLast = true,
    class: className,
    ...alpineProps
} = Astro.props;

// Alpine store for pagination state
const alpineStore = `{
  currentPage: ${currentPage},
  totalPages: ${totalPages},
  totalItems: ${totalItems},
  pageSize: ${pageSize},
  maxVisible: ${maxVisible},
  maxElements: ${maxElements},
  showInfo: ${showInfo},
  showFirstLast: ${showFirstLast},
  
  get visiblePages() {
    if (this.totalPages <= this.maxElements) {
      // Show all pages if total pages <= maxElements
      const pages = [];
      for (let i = 1; i <= this.totalPages; i++) {
        pages.push({ number: i, current: i === this.currentPage, isEllipsis: false });
      }
      return pages;
    }

    const pages = [];
    const current = this.currentPage;
    const total = this.totalPages;
    const maxElem = this.maxElements;
    
    // Calculate thresholds based on maxElements
    const sidePages = Math.floor((maxElem - 3) / 2); // Pages on each side in middle pattern
    const endThreshold = Math.floor(maxElem / 2); // When to switch from end to middle pattern
    const startThreshold = total - endThreshold + 1; // When to switch from middle to start pattern

    // Always show first page
    pages.push({ number: 1, current: current === 1, isEllipsis: false });

    if (current <= endThreshold) {
      // Pattern: 1 2 3 4 5 ... 9 (end overflow)
      for (let i = 2; i <= maxElem - 2; i++) {
        pages.push({ number: i, current: i === current, isEllipsis: false });
      }
      pages.push({ number: '...', current: false, isEllipsis: true });
      pages.push({ number: total, current: current === total, isEllipsis: false });
    } else if (current >= startThreshold) {
      // Pattern: 1 ... 5 6 7 8 9 (start overflow)
      pages.push({ number: '...', current: false, isEllipsis: true });
      for (let i = total - (maxElem - 3); i <= total; i++) {
        pages.push({ number: i, current: i === current, isEllipsis: false });
      }
    } else {
      // Pattern: 1 ... 3 4 5 ... 9 (middle overflow)
      pages.push({ number: '...', current: false, isEllipsis: true });
      for (let i = current - sidePages; i <= current + sidePages; i++) {
        pages.push({ number: i, current: i === current, isEllipsis: false });
      }
      pages.push({ number: '...', current: false, isEllipsis: true });
      pages.push({ number: total, current: current === total, isEllipsis: false });
    }

    return pages;
  },
  
  get hasPrevious() {
    return this.currentPage > 1;
  },
  
  get hasNext() {
    return this.currentPage < this.totalPages;
  },
  
  get startItem() {
    return (this.currentPage - 1) * this.pageSize + 1;
  },
  
  get endItem() {
    return Math.min(this.currentPage * this.pageSize, this.totalItems);
  },
  
  goToPage(page) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
      this.$dispatch('page-change', { page });
    }
  },
  
  nextPage() {
    this.goToPage(this.currentPage + 1);
  },
  
  previousPage() {
    this.goToPage(this.currentPage - 1);
  }
}`;
---

<div
    class={cn('flex flex-row items-center gap-1', className)}
    x-data={alpineStore}
    {...alpineProps}
>
    <slot />
</div>
