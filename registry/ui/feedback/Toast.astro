---
// Pine UI Toast - exact copy
import { Icon } from 'astro-icon/components';
---

<div
    x-data="{ 
        title: 'Default Toast Notification', 
        description: '',
        type: 'default',
        position: 'top-center',
        expanded: false
    }"
    x-init="
        console.log('🍞 Initializing Pine UI Toast...');
        window.toast = function(message, options = {}){
            console.log('🍞 Toast function called with:', message, options);
            let description = '';
            let type = 'default';
            let position = 'top-center';
            let html = '';
            let duration = 4000;
            if(typeof options.description != 'undefined') description = options.description;
            if(typeof options.type != 'undefined') type = options.type;
            if(typeof options.position != 'undefined') position = options.position;
            if(typeof options.html != 'undefined') html = options.html;
            if(typeof options.duration != 'undefined') duration = options.duration;
            
            console.log('🍞 Dispatching toast-show event with:', { type, message, description, position, html, duration });
            window.dispatchEvent(new CustomEvent('toast-show', { detail : { type: type, message: message, description: description, position : position, html: html, duration: duration }}));
            console.log('🍞 Toast event dispatched');
        }
        
        console.log('🍞 Pine UI Toast initialized, window.toast:', window.toast);
    "
>
</div>

<ul
    x-data="{ 
                toasts: [],
                toastsHovered: false,
                expanded: false,
                layout: 'default',
                position: 'top-center',
                paddingBetweenToasts: 15,
                deleteToastWithId (id){
                    for(let i = 0; i < this.toasts.length; i++){
                        if(this.toasts[i].id === id){
                            this.toasts.splice(i, 1);
                            break;
                        }
                    }
                },
                burnToast(id){
                    burnToast = this.getToastWithId(id);
                    burnToastElement = document.getElementById(burnToast.id);
                    if(burnToastElement){
                        if(this.toasts.length == 1){
                            if(this.layout=='default'){
                                this.expanded = false;
                            }
                            burnToastElement.classList.remove('translate-y-0');
                            if(this.position.includes('bottom')){
                                burnToastElement.classList.add('translate-y-full');
                            } else {
                                burnToastElement.classList.add('-translate-y-full');
                            }
                            burnToastElement.classList.add('-translate-y-full');
                        }
                        burnToastElement.classList.add('opacity-0');
                        let that = this;
                        setTimeout(function(){
                            that.deleteToastWithId(id);
                            setTimeout(function(){
                                that.stackToasts();
                            }, 1)
                        }, 300);
                    }
                },
                getToastWithId(id){
                    for(let i = 0; i < this.toasts.length; i++){
                        if(this.toasts[i].id === id){
                            return this.toasts[i];
                        }
                    }
                },
                stackToasts(){
                    this.positionToasts();
                    this.calculateHeightOfToastsContainer();
                    let that = this;
                    setTimeout(function(){
                        that.calculateHeightOfToastsContainer();
                    }, 300);
                },
                positionToasts(){
                    if(this.toasts.length == 0) return;
                    let topToast = document.getElementById( this.toasts[0].id );
                    topToast.style.zIndex = 100;
                    if(this.expanded){
                        if(this.position.includes('bottom')){
                            topToast.style.top = 'auto';
                            topToast.style.bottom = '0px';
                        } else {
                            topToast.style.top = '0px';
                        }
                    }

                    let bottomPositionOfFirstToast = this.getBottomPositionOfElement(topToast);

                    if(this.toasts.length == 1) return;
                    let middleToast = document.getElementById( this.toasts[1].id );
                    middleToast.style.zIndex = 90;

                    if(this.expanded){
                        middleToastPosition = topToast.getBoundingClientRect().height +
                                                this.paddingBetweenToasts + 'px';

                        if(this.position.includes('bottom')){
                            middleToast.style.top = 'auto';
                            middleToast.style.bottom = middleToastPosition;
                        } else {
                            middleToast.style.top = middleToastPosition;
                        }

                        middleToast.style.scale = '100%';
                        middleToast.style.transform = 'translateY(0px)';
                        
                    } else {
                        middleToast.style.scale = '94%';
                        if(this.position.includes('bottom')){
                            middleToast.style.transform = 'translateY(-16px)';
                        } else {
                            this.alignBottom(topToast, middleToast);
                            middleToast.style.transform = 'translateY(16px)';
                        }
                    }
                    

                    if(this.toasts.length == 2) return;
                    let bottomToast = document.getElementById( this.toasts[2].id );
                    bottomToast.style.zIndex = 80;
                    if(this.expanded){
                        bottomToastPosition = topToast.getBoundingClientRect().height + 
                                                this.paddingBetweenToasts + 
                                                middleToast.getBoundingClientRect().height +
                                                this.paddingBetweenToasts + 'px';
                        
                        if(this.position.includes('bottom')){
                            bottomToast.style.top = 'auto';
                            bottomToast.style.bottom = bottomToastPosition;
                        } else {
                            bottomToast.style.top = bottomToastPosition;
                        }

                        bottomToast.style.scale = '100%';
                        bottomToast.style.transform = 'translateY(0px)';
                    } else {
                        bottomToast.style.scale = '88%';
                        if(this.position.includes('bottom')){
                            bottomToast.style.transform = 'translateY(-32px)';
                        } else {
                            this.alignBottom(topToast, bottomToast);
                            bottomToast.style.transform = 'translateY(32px)';
                        }
                    }

                    

                    if(this.toasts.length == 3) return;
                    let burnToast = document.getElementById( this.toasts[3].id );
                    burnToast.style.zIndex = 70;
                    if(this.expanded){
                        burnToastPosition = topToast.getBoundingClientRect().height + 
                                                this.paddingBetweenToasts + 
                                                middleToast.getBoundingClientRect().height + 
                                                this.paddingBetweenToasts + 
                                                bottomToast.getBoundingClientRect().height + 
                                                this.paddingBetweenToasts + 'px';
                        
                        if(this.position.includes('bottom')){
                            burnToast.style.top = 'auto';
                            burnToast.style.bottom = burnToastPosition;
                        } else {
                            burnToast.style.top = burnToastPosition;
                        }

                        burnToast.style.scale = '100%';
                        burnToast.style.transform = 'translateY(0px)';
                    } else {
                        burnToast.style.scale = '82%';
                        this.alignBottom(topToast, burnToast);
                        burnToast.style.transform = 'translateY(48px)';
                    }

                    burnToast.firstElementChild.classList.remove('opacity-100');
                    burnToast.firstElementChild.classList.add('opacity-0');

                    let that = this;
                    // Burn 🔥 (remove) last toast
                    setTimeout(function(){
                            that.toasts.pop();
                        }, 300);

                    if(this.position.includes('bottom')){
                            middleToast.style.top = 'auto';
                    }

                    return;
                },
                alignBottom(element1, element2) {
                    // Get the top position and height of the first element
                    let top1 = element1.offsetTop;
                    let height1 = element1.offsetHeight;

                    // Get the height of the second element
                    let height2 = element2.offsetHeight;

                    // Calculate the top position for the second element
                    let top2 = top1 + (height1 - height2);

                    // Apply the calculated top position to the second element
                    element2.style.top = top2 + 'px';
                },
                alignTop(element1, element2) {
                    // Get the top position of the first element
                    let top1 = element1.offsetTop;

                    // Apply the same top position to the second element
                    element2.style.top = top1 + 'px';
                },
                resetBottom(){
                    for(let i = 0; i < this.toasts.length; i++){
                        if(document.getElementById( this.toasts[i].id )){
                            let toastElement = document.getElementById( this.toasts[i].id );
                            toastElement.style.bottom = '0px';
                        }
                    }
                },
                resetTop(){
                    for(let i = 0; i < this.toasts.length; i++){
                        if(document.getElementById( this.toasts[i].id )){
                            let toastElement = document.getElementById( this.toasts[i].id );
                            toastElement.style.top = '0px';
                        }
                    }
                },
                getBottomPositionOfElement(el){
                    return (el.getBoundingClientRect().height + el.getBoundingClientRect().top);
                },
                calculateHeightOfToastsContainer(){
                    if(this.toasts.length == 0){
                        $el.style.height = '0px';
                        return;
                    }

                    lastToast = this.toasts[this.toasts.length - 1];
                    lastToastRectangle = document.getElementById(lastToast.id).getBoundingClientRect();
                    
                    firstToast = this.toasts[0];
                    firstToastRectangle = document.getElementById(firstToast.id).getBoundingClientRect();

                    if(this.toastsHovered){
                        if(this.position.includes('bottom')){
                            $el.style.height = ((firstToastRectangle.top + firstToastRectangle.height) - lastToastRectangle.top) + 'px';
                        } else {
                            $el.style.height = ((lastToastRectangle.top + lastToastRectangle.height) - firstToastRectangle.top) + 'px';
                        }
                    } else {
                        $el.style.height = firstToastRectangle.height + 'px';
                    }
                }
            }"
    @set-toasts-layout.window="
                layout=event.detail.layout;
                if(layout == 'expanded'){
                    expanded=true;
                } else {
                    expanded=false;
                }
                stackToasts();
            "
    @toast-show.window="
                console.log('🎯 Toast show event received:', event.detail);
                event.stopPropagation();
                if(event.detail.position){
                    position = event.detail.position;
                    console.log('🎯 Position set to:', position);
                }
                let newToast = {
                    id: 'toast-' + Math.random().toString(16).slice(2),
                    show: false,
                    message: event.detail.message,
                    description: event.detail.description,
                    type: event.detail.type,
                    html: event.detail.html,
                    duration: event.detail.duration
                };
                console.log('🎯 Adding new toast:', newToast);
                toasts.unshift(newToast);
                console.log('🎯 Toasts array now:', toasts);
            "
    @mouseenter="toastsHovered=true;"
    @mouseleave="toastsHovered=false"
    x-init="
                console.log('🏗️ Teleported toast container initializing...');
                if(layout == 'expanded'){
                    expanded = true;
                }
                stackToasts();
                console.log('🏗️ Initial stackToasts completed');
                $watch('toastsHovered', function(value){
                    console.log('🏗️ toastsHovered changed to:', value);

                    if(layout == 'default'){
                        if(position.includes('bottom')){
                            resetBottom();
                        } else {
                            resetTop();
                        }

                        if(value){
                            // calculate the new positions
                            expanded = true;
                            if(layout == 'default'){
                                stackToasts();
                            }
                        } else {
                            if(layout == 'default'){
                                expanded = false;
                                //setTimeout(function(){
                                stackToasts();
                            //}, 10);
                                setTimeout(function(){
                                    stackToasts();
                                }, 10)
                            }
                        }
                    }
                });
                console.log('🏗️ Teleported toast container fully initialized');
            "
    class="fixed block w-full group z-[99] sm:max-w-xs"
    :class="{ 'right-0 top-0 sm:mt-6 sm:mr-6': position=='top-right', 'left-0 top-0 sm:mt-6 sm:ml-6': position=='top-left', 'left-1/2 -translate-x-1/2 top-0 sm:mt-6': position=='top-center', 'right-0 bottom-0 sm:mr-6 sm:mb-6': position=='bottom-right', 'left-0 bottom-0 sm:ml-6 sm:mb-6': position=='bottom-left', 'left-1/2 -translate-x-1/2 bottom-0 sm:mb-6': position=='bottom-center' }"
    x-cloak
>
    <template x-for="(toast, index) in toasts" :key="toast.id">
        <li
            :id="toast.id"
            x-data="{
                        toastHovered: false
                    }"
            x-init="
                        console.log('🎨 Toast item initializing:', toast.id, toast.message);
                        console.log('🎨 Position:', position);
                        console.log('🎨 Element:', $el);
                        console.log('🎨 First child:', $el.firstElementChild);
                        
                        if(position.includes('bottom')){
                            $el.firstElementChild.classList.add('toast-bottom');
                            $el.firstElementChild.classList.add('opacity-0', 'translate-y-full');
                            console.log('🎨 Added bottom classes');
                        } else {
                            $el.firstElementChild.classList.add('opacity-0', '-translate-y-full');
                            console.log('🎨 Added top classes');
                        }
                        setTimeout(function(){
                            console.log('🎨 Starting show animation for:', toast.id);
                            
                            setTimeout(function(){
                                if(position.includes('bottom')){
                                    $el.firstElementChild.classList.remove('opacity-0', 'translate-y-full');
                                } else {
                                    $el.firstElementChild.classList.remove('opacity-0', '-translate-y-full');
                                }
                                $el.firstElementChild.classList.add('opacity-100', 'translate-y-0');
                                console.log('🎨 Toast should be visible now:', toast.id);

                                setTimeout(function(){
                                    stackToasts();
                                }, 10);
                            }, 5);
                        }, 50);
        
                        if(toast.duration && toast.duration > 0) {
                            setTimeout(function(){
                                console.log('🎨 Starting hide animation for:', toast.id);
                                setTimeout(function(){
                                    $el.firstElementChild.classList.remove('opacity-100');
                                    $el.firstElementChild.classList.add('opacity-0');
                                    if(toasts.length == 1){
                                        $el.firstElementChild.classList.remove('translate-y-0');
                                        $el.firstElementChild.classList.add('-translate-y-full');
                                    }
                                    setTimeout(function(){
                                        console.log('🎨 Deleting toast:', toast.id);
                                        deleteToastWithId(toast.id)
                                    }, 300);
                                }, 5);
                            }, toast.duration);
                        } 
                    "
            @mouseover="toastHovered=true"
            @mouseout="toastHovered=false"
            class="absolute w-full duration-300 ease-out select-none sm:max-w-xs"
            :class="{ 'toast-no-description': !toast.description }"
        >
            <span
                class="relative flex shadow-[0_5px_15px_-3px_rgb(0_0_0_/_0.08)] w-full transition-all duration-300 ease-out bg-white border border-gray-100 sm:rounded-md sm:max-w-xs group"
                :class="{ 'p-4' : !toast.html, 'p-0' : toast.html }"
            >
                <template x-if="!toast.html">
                    <div class="flex-1 min-w-0">
                        <div
                            class="flex items-center"
                            :class="{ 'text-green-500' : toast.type=='success', 'text-blue-500' : toast.type=='info', 'text-orange-400' : toast.type=='warning', 'text-red-500' : toast.type=='danger', 'text-gray-800' : toast.type=='default' }"
                        >
                            <Icon name="lucide:check-circle"
                                x-show="toast.type=='success'"
                                class="w-[18px] h-[18px] mr-1.5 flex-shrink-0" />
                            <Icon name="lucide:info"
                                x-show="toast.type=='info'"
                                class="w-[18px] h-[18px] mr-1.5 flex-shrink-0" />
                            <Icon name="lucide:alert-triangle"
                                x-show="toast.type=='warning'"
                                class="w-[18px] h-[18px] mr-1.5 flex-shrink-0" />
                            <Icon name="lucide:x-circle"
                                x-show="toast.type=='danger'"
                                class="w-[18px] h-[18px] mr-1.5 flex-shrink-0" />
                            <span
                                class="text-[13px] font-medium text-gray-800"
                                x-text="toast.message"
                            >
                            </span>
                        </div>
                        <span
                            x-show="toast.description"
                            :class="{ 'pl-6' : toast.type!='default' }"
                            class="text-xs leading-none opacity-70 mt-1"
                            x-text="toast.description"
                        >
                        </span>
                    </div>
                </template>
                <template x-if="toast.html">
                    <div class="flex-1" x-html="toast.html"></div>
                </template>
                <span
                    @click="burnToast(toast.id)"
                    class="flex-shrink-0 p-1 ml-2 text-gray-400 duration-100 ease-in-out rounded-full opacity-0 cursor-pointer hover:bg-gray-50 hover:text-gray-500 self-start"
                    :class="{ 'opacity-100' : toastHovered, 'opacity-0' : !toastHovered }"
                >
                    <Icon name="lucide:x" class="w-3 h-3" />
                </span>
            </span>
        </li>
    </template>
</ul>
