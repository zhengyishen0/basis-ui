---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import {
    shapes,
    elevationOptions,
    semanticVariants,
} from '@/lib/component-variants';

const avatarVariants = cva(
    'relative flex shrink-0 overflow-hidden items-center justify-center',
    {
        variants: {
            variant: semanticVariants,
            size: {
                xs: `h-6 w-6`,
                sm: `h-8 w-8`,
                md: `h-10 w-10`,
                lg: `h-12 w-12`,
                xl: `h-14 w-14`,
            },
            shape: shapes,
            elevation: elevationOptions,
        },
    }
);

export interface Props extends VariantProps<typeof avatarVariants> {
    src?: string;
    alt?: string;
    fallback?: string;
    href?: string;
    className?: string;
    imageSize?: 'full' | '3/4' | '2/3' | '1/2';
    [key: string]: any;
}

const {
    src,
    alt,
    fallback,
    variant = 'ghost',
    size = 'md',
    shape = 'pill',
    elevation = 'none',
    className,
    href,
    imageSize = 'full',
    ...alpineProps
} = Astro.props;

const imageSizeClasses = {
    'full': 'h-full w-full',
    '3/4': 'h-3/4 w-3/4',
    '2/3': 'h-2/3 w-2/3',
    '1/2': 'h-1/2 w-1/2'
};

const Tag = href ? 'a' : 'div';
---

<Tag
    class={cn(avatarVariants({ variant, size, shape, elevation }), className)}
    {...href ? { href } : {}}
    {...alpineProps}
>
    {
        src ? (
            <img
                src={src}
                alt={alt || ''}
                class={`aspect-square ${imageSizeClasses[imageSize]} object-cover rounded-full`}
            />
        ) : (
            <div class="flex h-full w-full items-center justify-center bg-muted text-muted-foreground font-medium text-sm">
                {fallback || <slot />}
            </div>
        )
    }
</Tag>
