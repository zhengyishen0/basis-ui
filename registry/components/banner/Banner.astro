---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import { overflowVariants } from '@/lib/component-variants';

const bannerVariants = cva('relative w-full flex items-start gap-3 border', {
    variants: {
        variant: {
            default: 'bg-primary border-primary text-primary-foreground',
            secondary:
                'bg-secondary border-secondary text-secondary-foreground',
            destructive:
                'bg-destructive border-destructive text-destructive-foreground',
            success: 'bg-success border-success text-success-foreground',
            warning: 'bg-warning border-warning text-warning-foreground',
            info: 'bg-info border-info text-info-foreground',
            outline: 'bg-background border-border text-foreground',
        },
        position: {
            static: '',
            top: 'fixed top-0 left-0 z-50 w-full border-b',
            bottom: 'fixed bottom-0 left-0 z-50 w-full border-t',
            'sticky-top': 'sticky top-0 z-40 w-full border-b',
            'sticky-bottom': 'sticky bottom-0 z-40 w-full border-t',
        },
        overflow: overflowVariants,
    },
});

export interface Props extends VariantProps<typeof bannerVariants> {
    visible?: boolean;
    visibleAfter?: number;
    bannerId?: string;
    class?: string;
    // Alpine.js pass-through
    [key: string]: any;
}

const {
    variant = 'default',
    position = 'static',
    overflow = 'fixed',
    visible = false, // Default to false - banners should be hidden until called
    visibleAfter = 0,
    bannerId,
    class: className,
    ...alpineProps
} = Astro.props;
---

<!-- 
Composable Banner Component (shadcn style)

Usage:
<Banner variant="default" position="top" visible={true} visibleAfter={300}>
  <BannerIcon icon={CircleAlert} />
  <BannerTitle>Important message</BannerTitle>
  <BannerDescription>Additional details here</BannerDescription>
  <BannerAction>Learn more</BannerAction>
  <BannerClose />
</Banner>

Variants: default, secondary, destructive, success, warning, info, outline
Position: static, top, bottom, fixed-top, fixed-bottom
Features:
- Universal system compliance (padding, elevation, overflow)
- Composable sub-components
- Alpine.js integration with visibility control
- Smooth transitions
-->
<div
    x-data={`{ 
    bannerVisible: ${visible}, 
    bannerVisibleAfter: ${visibleAfter} 
  }`}
    x-init={visibleAfter > 0
        ? `setTimeout(() => { bannerVisible = true }, ${visibleAfter})`
        : ''}
    @show-banner.window={bannerId
        ? `if ($event.detail.bannerId === '${bannerId}') bannerVisible = true`
        : 'bannerVisible = true'}
    @hide-banner.window={bannerId
        ? `if ($event.detail.bannerId === '${bannerId}') bannerVisible = false`
        : 'bannerVisible = false'}
    x-show="bannerVisible"
    x-transition:enter="transition ease-out duration-500"
    x-transition:enter-start={position === 'bottom' ||
    position === 'sticky-bottom'
        ? 'translate-y-10 opacity-0'
        : '-translate-y-10 opacity-0'}
    x-transition:enter-end="translate-y-0 opacity-100"
    x-transition:leave="transition ease-in duration-300"
    x-transition:leave-start="translate-y-0 opacity-100"
    x-transition:leave-end={position === 'bottom' ||
    position === 'sticky-bottom'
        ? 'translate-y-10 opacity-0'
        : '-translate-y-10 opacity-0'}
    class={cn(
        bannerVariants({ variant, position, overflow }),
        'p-4', // Default padding
        'shadow-sm', // Default elevation
        className
    )}
    {...alpineProps}
>
    <slot />
</div>
